@using Vendr.Core;
@using Vendr.DemoStore;
@using Vendr.DemoStore.Models;
@inherits Umbraco.Web.Mvc.UmbracoViewPage<ProductPage>
@{
    Layout = "Page.cshtml";

    var addedProductReference = TempData["addedProductReference"]?.ToString();
}

@section foot {
    @if (!addedProductReference.IsNullOrWhiteSpace())
    {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                Toastify({
                    text: "Item successfully added to cart",
                    duration: 3000,
                    gravity: "bottom", // `top` or `bottom`
                    position: 'center', // `left`, `center` or `right`
                    backgroundColor: "#4fd1c5",
                    className: "",
                    stopOnFocus: true, // Prevents dismissing of toast on hover
                }).showToast();
            });
        </script>
    }
}

<div class="pt-6">
    <div class="md:flex mb-4">
        <div class="w-full md:w-1/2 md:mr-6">
            <img src="@(Model.PrimaryImage != null ? Url.GetCropUrl(Model.PrimaryImage, 500, 500).ToString() : "https://placehold.it/400x500")" class="border w-full product-image" />
            @if (Model.Images.Count() > 1)
            {
                <div class="flex flex-wrap -mx-2">
                    @foreach (var img in Model.Images)
                    {
                        <a href="@(Url.GetCropUrl(img, 500, 500).ToString())" class="product-image__thumb w-1/3 px-2 pt-4"><img src="@Url.GetCropUrl(img, 150, 150).ToString()" class="border w-full" /></a>
                    }
                </div>
            }
            <div class="text-center text-gray-500 mt-4 rte trim">
                @Model.Collection.ImagesCredit
            </div>
        </div>
        <div class="flex-1">
            @using (Html.BeginUmbracoForm("AddToCart", "CartSurface"))
            {
                <div class="py-10">
                    <h1 class="text-2xl font-bold">@Model.Parent.Name - @Model.Name</h1>
                    @RenderVariants(Model, addedProductReference)
                </div>

                <button class="font-bold border-4 border-gray-900 px-6 py-3 mb-4 lg:w-1/2 hover:bg-teal-400 hover:border-teal-400 hover:text-white" type="submit">Add to Cart</button>
            }
            <div class="flex">
                <a href="#" class="mr-4 hover:text-teal-400"><i class="fa fa-facebook-square"></i> Share it</a>
                <a href="#" class="mr-4 hover:text-teal-400"><i class="fa fa-twitter"></i> Tweet it</a>
                <a href="#" class="mr-4 hover:text-teal-400"><i class="fa fa-pinterest"></i> Pin it</a>
            </div>
        </div>
    </div>
    <hr class="my-6" />
    <div>
        <h2 class="text-2xl font-bold">Description</h2>
        <div class="rte">
            @Model.LongDescription
        </div>
    </div>
</div>

@helper RenderVariants(ProductPage product, string addedProductReference)
{
    if (product.Variants.Any())
    {
        if (product.IsGiftCard)
        {
            var selectedReference = addedProductReference ?? product.Variants.FirstOrDefault()?.GetProductReference();

            <div class="gift-cards flex justify-start space-x-2 space-y-2 -mx-2">
                @foreach (var variant in product.Variants)
                {
                    var productReference = variant.GetProductReference();

                    <input type="radio" class="form-radio" name="productReference" id="giftcard-@productReference" value="@productReference" @Html.Raw(selectedReference == productReference ? "checked=\"checked\"" : "") />
                    <label class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 border-2 cursor-pointer rounded" for="giftcard-@productReference">@(variant.CalculatePrice()?.Formatted())</label>
                }
            </div>
        }
        else
        {
            <select name="productReference" class="w-full border border-gray-300 p-2 mt-1">
                @foreach (var variant in product.Variants)
                {
                    var productReference = variant.GetProductReference();

                    <option value="@productReference" @Html.Raw(addedProductReference == productReference ? "selected=\"selected\"" : "")>@(variant.Name) - @(variant.CalculatePrice()?.Formatted())</option>
                }
            </select>
        }
    }
    else
    {
        @Html.Hidden("productReference", product.GetProductReference())

        <p>@(product.CalculatePrice()?.Formatted())</p>
    }
}